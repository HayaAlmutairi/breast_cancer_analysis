# -*- coding: utf-8 -*-
"""EMAI640_Assignment1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1NJ6-KVKsdYtxmMOos8EnFBksmGlmD8rM

# Naive Bayes classifier: breast_cancer dataset

# Loading libraries and dataset
"""

# Import required libraries
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.datasets import load_breast_cancer
from sklearn.preprocessing import StandardScaler
from sklearn.naive_bayes import GaussianNB
from sklearn.model_selection import train_test_split
from sklearn.metrics import classification_report, confusion_matrix

# load dataset
data = load_breast_cancer()
data

# looping between the keys in the dataset
for key, value in data.items():
    print(f"Key: {key}, Value: {value}")

# create a DataFrame from the data
df = pd.DataFrame(data.data, columns=data.feature_names)

# add the target variable (0: malignant, 1: benign)
df['target'] = data.target

# display the DataFrame
print(df.head())

"""# Exploratory Data Analysis (EDA):"""

df.head()

df.columns

df['target'].unique()

"""##### 0 means malignant tumor, 1 mean benign tumor"""

df.shape

df.describe()

df.info()

# identify missing values
df.isnull().sum()

# plot the frequency of 0 malignant tumor, 1 benign tumor
plt.hist(df['target'],bins=[-0.25, 0.25,  0.75,1.25], rwidth=0.8, align='mid');
plt.xticks([0, 1], ['malignant tumor','benign tumor'])
plt.show()

# plot the features distrbution
df.hist(bins=20, figsize=(20, 20));

# plot features correlation
correlation_matrix = df.corr()
sns.heatmap(correlation_matrix, cmap="viridis")
plt.show()

"""# Categorical Variables:"""

# it will disply error since there is no categorical variables
# df.describe(include="object")

"""# Feature Scaling:"""

X = df.drop('target', axis=1)
y = df['target']

scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)

"""# Model Training:"""

X_train, X_test, y_train, y_test = train_test_split(X_scaled, y, test_size=0.2, random_state=1)

naive_bayes_model = GaussianNB()
naive_bayes_model.fit(X_train, y_train)

"""# Model Evaluation:"""

train_accuracy = naive_bayes_model.score(X_train, y_train)
test_accuracy = naive_bayes_model.score(X_test, y_test)

print("train_accuracy:", train_accuracy)
print("test_accuracy:", test_accuracy)

"""# Classification Metrics:"""

y_pred = naive_bayes_model.predict(X_test)
classification_report_result = classification_report(y_test, y_pred)
print(classification_report_result)

"""The model performs well between class 0 and class 1, as evidenced by high and balanced precision and recall across the classes.

# Confusion Matrix:
"""

print(confusion_matrix(y_test, y_pred))

"""- True Negative (TN): 38 instances were correctly predicted as class 0 (negative).
- False Positive (FP): 4 instances were incorrectly predicted as class 1 (positive) when they were actually class 0.
- False Negative (FN): 2 instances were incorrectly predicted as class 0 when they were actually class 1.
- True Positive (TP): 70 instances were correctly predicted as class 1.
"""

